syntax = "proto3";

package almanac;

import "proto/storage.proto";

// A request to record append a log entry to an open chunk.
message AppendRequest {
  LogEntry entry = 1;
}

message AppendResponse {
}

service Appender {
  // Appends an entry to an open chunk on this appender.
  rpc Append (AppendRequest) returns (AppendResponse);

  // Executes a search on any open chunk(s) on this appender.
  rpc Search (SearchRequest) returns (SearchResponse);
}

// A request to ingest a single log entry into the system.
message IngestRequest {
  // A json object representing the entry to ingest.
  string entry_json = 1;
}

message IngestResponse {
}

service Ingester {
  rpc Ingest (IngestRequest) returns (IngestResponse);
}

// A request to search for log entries.
message SearchRequest {
  // A start time in epoch millisconds, inclusive. The search only returns
  // entries whose timestamp is at least this value.
  int64 start_ms = 2;

  // An end time in epoch milliseconds. If non-zero, only entries whose
  // timestamp is before this value are returned.
  int64 end_ms = 3;

  // A text-format query.
  string query = 4;

  // The maximum number of results to return.
  int32 num = 5;
}

// The result of searching for log entries.
message SearchResponse {
  // All the entries which have matched the search.
  repeated LogEntry entries = 2;
}

service Mixer {
  rpc Search (SearchRequest) returns (SearchResponse);
}
